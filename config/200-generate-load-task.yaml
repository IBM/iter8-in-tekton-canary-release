apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-load-task
  namespace: tekton-pipelines
spec:
  resources:
    inputs:
      - name: git-source
        type: git
  params:
    - name: target-namespace
      default: iter8-demo-project
    - name: pipeline-properties
      default: iter8/pipeline.prop
  steps:
    - name: generate-load
      image: linkyard/kubectl:1.14.2
      script: |
        #!/bin/bash
        CLUSTER_NAMESPACE=$(params.target-namespace)
        PROPERTY_FILE=/workspace/git-source/$(params.pipeline-properties)
        # Identify application URL
        HOST=$(grep app-host ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//')
        if [[ -n ${HOST} ]]; then
          HOST=$(echo $HOST | sed "s#\$NAMESPACE#$CLUSTER_NAMESPACE#")
          echo "HOST = $HOST"
        fi
        PORT=$(grep port ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//') 
        IP=$(grep ip ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//') 
        URL_PATH=$(grep app-path ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//')
        URL="http://${IP}:${PORT}/${URL_PATH}"
        echo "Application URL = ${URL}"
        if [[ -z ${HOST} ]]; then
          echo "curl command: curl -o /dev/null -s -w \"%{http_code}\\n\" ${URL}"
        else
          echo "curl command: curl -H \"Host: ${HOST}\" -o /dev/null -s -w \"%{http_code}\\n\" ${URL}"
        fi
        # Generate requests until wait-complete-task writes to $STATUS_FILE or timeout
        DURATION=$(grep load-duration ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//')
        DURATION="${DURATION:-600}"
        FREQUENCY=$(grep load-frequency ${PROPERTY_FILE} | cut -d':' -f2 | sed 's/^[[:space:]]//')
        FREQUENCY="${FREQUENCY:-0.1}"
        EXPERIMENT=$(grep -m 1 name: /workspace/git-source/config/deploy.yaml | cut -f 2 -d ":" | xargs)
        STATUS_FILE="/status/done-${EXPERIMENT}"
        echo "       HOST=$HOST"
        echo "   DURATION=$DURATION"
        echo "  FREQUENCY=$FREQUENCY"
        echo "STATUS_FILE=$STATUS_FILE"
        COUNT=0
        startS=$(date +%s)
        timePassedS=$(( $(date +%s) - $startS ))
        while [ $timePassedS -lt $DURATION ]; do
          if [ -f ${STATUS_FILE} ]; then 
            echo "Experiment completed, found completion file ${STATUS_FILE}"
            break
          fi
          sleep ${FREQUENCY}
          OUT=
          if [[ -z ${HOST} ]]; then
            OUT=$(curl -o /dev/null -s -w "%{http_code}\n" ${URL})
          else
            OUT=$(curl -H "Host: ${HOST}" -o /dev/null -s -w "%{http_code}\n" ${URL})
          fi
          if [[ "${OUT}" != "200" ]]; then echo "Not OK: ${OUT}"; fi
          COUNT=$(( $COUNT + 1 ))
          timePassedS=$(( $(date +%s) - $startS ))
        done
        echo "Sent ${COUNT} queries over ${timePassedS}s"
        rm ${STATUS_FILE} || true # ignore case when no such file
  workspaces:
    - name: status
      mountPath: /status
